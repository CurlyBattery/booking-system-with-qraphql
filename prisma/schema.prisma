// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

generator default {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(cuid())
  email    String @unique
  password String
  name     String

  role     Role      @default(USER)
  bookings Booking[]

  createdAt DateTime @default(now()) @map("created_at")

  @@map("users")
}

model Venue {
  id          String  @id @default(cuid())
  name        String
  description String?
  location    String

  rooms Room[]

  createdAt DateTime @default(now()) @map("created_at")

  @@map("venues")
}

model Room {
  id       String @id @default(cuid())
  name     String
  capacity Int
  venueId  String @map("venue_id")

  venue    Venue     @relation(fields: [venueId], references: [id], onDelete: Cascade)
  bookings Booking[]

  @@map("rooms")
}

model Booking {
  id        String        @id @default(cuid())
  userId    String        @map("user_id")
  roomId    String        @map("room_id")
  startTime DateTime      @map("start_time")
  endTime   DateTime      @map("end_time")
  status    BookingStatus @default(PENDING)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, roomId, startTime, endTime])
  @@map("bookings")
}

enum Role {
  USER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}
